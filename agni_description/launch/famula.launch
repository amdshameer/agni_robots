<launch>
  <!-- EXPECTS agni_description to be compiled to get urdf generated in devel space -->
  <arg name="SIM" default="true"/>
  <arg name="RTT" default="1"/>
  <!-- RTT to select if an RTT enviromnemt + deployer + services should be started -->
  
  <!-- do a find only once -->
  <arg name="agni" value="$(find agni_description)"/>
    
  <group if="$(arg SIM)">
    <!-- start gazebo with an empty plane -->
    <!-- Gazebo world file to load. -->
    <arg name="world_name" default="$(find agni_description)/models/agni.world" />
    <arg name="gui" default="true"/>
  
    <!-- We want gazebo to stay in the root namespace but the nodes below to be
    relative. Can then launch this inside a namespace to namespace the hand. -->
    <group ns="/">
        <!-- We reuse the logic in empty_world.launch, changing only the name of the world to be launched -->
      <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="gui" value="$(arg gui)"/>
      </include>      
    </group>
  </group>
  
  <!-- rtt deployement environment -->
  <group if="$(arg RTT)">
    <include file="$(find agni_description)/launch/rtt_bringup.launch"/>
  </group> 
  
  <!-- load frame description  -->
  <param name="platform_description" textfile="$(find agni_description)/robots/famula_frame.urdf" />
  <!-- load camera description -->
  <param name="camera_description" command="$(find icl_config_parser_py)/icl_conf_parser.py '$(arg agni)/calibration/depth-qvga.xml'"/>
  
  <!-- set robot description for combined table + robot arm and end-effector  -->
  <param name="robot_description" textfile="$(find agni_description)/robots/famula.urdf" /> 
 
  <group if="$(arg SIM)">
    <!-- spawn the support model -->
    <node name="spawn_support" pkg="gazebo_ros" type="spawn_model" args="-urdf -param platform_description -model platform -z 0" respawn="false" output="screen" /> 
    <!-- spawn the camera model -->
    <node name="spawn_camera" pkg="gazebo_ros" type="spawn_model" args="-urdf -param camera_description -model icl_camera" respawn="false" output="screen" />
    
    <!-- load hand description only in sim, in real, the drivers is loading it -->  
    <!-- needed for the sr_gazebo_plugin -->
    <group ns="lh">
       <!-- load robot_description -->
        <param name="robot_description" textfile="$(find agni_description)/robots/left_shadow_hand_motor_ubi.urdf" /> 
    </group>
    <group ns="rh">
        <!-- load robot_description -->
        <param name="robot_description" textfile="$(find agni_description)/robots/right_shadow_hand_motor_ubi.urdf" /> 
    </group>
  </group>
  
  <!-- needed for kuka using the sr_gazebo_plugin -->
  <group ns="la">
    <!-- load robot_description -->
    <param name="robot_description" textfile="$(find agni_description)/robots/left_kuka.urdf" />
  </group> 
  <group ns="ra">
    <!-- load robot_description -->
    <param name="robot_description" textfile="$(find agni_description)/robots/right_kuka.urdf" />
  </group> 

  <!-- robots -->
  <!-- Load the general left|right robot_description, spawn it, merge joint_states -->
  <group ns="left">
    <!-- load robot_description -->
    <param name="robot_description" textfile="$(find agni_description)/robots/left_kuka_shadow_hand_motor_ubi.urdf" /> 
    <param name="tf_prefix" value="left"/>
    <!-- spawn in the sim world if SIM -->
    <group if="$(arg SIM)">
      <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model"
     args="-urdf -param robot_description -model left_kuka_shadow"
     respawn="false" output="screen" />
    </group>   
    <node pkg="robot_state_publisher" type="robot_state_publisher"
                            name="robot_state_publisher_full_pos">
      <param name="publish_frequency" type="double" value="10.0" />
    </node>
    <node pkg="topic_tools" type="relay"
        name="kuka_joint_state_merger"
        args="/la/joint_states /left/joint_states" >
    </node>
    <node pkg="topic_tools" type="relay"
        name="shadow_joint_state_merger"
        args="/lh/joint_states /left/joint_states" >
    </node>     
  </group>
  
  <!-- relay LEFT arm+hand joint_states to the main one-->
  <node pkg="topic_tools" type="relay"
    name="left_joint_state_merger"
    args="/left/joint_states /joint_states" >
  </node>
  
  <group ns="right">
    <!-- load robot_description -->
    <param name="robot_description" textfile="$(find agni_description)/robots/right_kuka_shadow_hand_motor_ubi.urdf" /> 
    <param name="tf_prefix" value="right"/>
    <!-- spawn in the sim world if SIM -->
    <group if="$(arg SIM)">
      <node name="spawn_robot" pkg="gazebo_ros" type="spawn_model"
     args="-urdf -param robot_description -model right_kuka_shadow"
     respawn="false" output="screen" />
    </group> 
    <node pkg="robot_state_publisher" type="robot_state_publisher"
                            name="robot_state_publisher_full_pos">
      <param name="publish_frequency" type="double" value="10.0" />
    </node>
    <!-- robot_state_publisher can work with data coming from different sources at different times -->
    <node pkg="topic_tools" type="relay"
        name="kuka_joint_state_merger"
        args="/ra/joint_states /right/joint_states" >
    </node>
    <node pkg="topic_tools" type="relay"
        name="shadow_joint_state_merger"
        args="/rh/joint_states /right/joint_states" >
    </node>
  </group>
  
  <!-- relay RIGHT arm+hand joint_states to the main one-->
  <node pkg="topic_tools" type="relay"
    name="right_joint_state_merger"
    args="/right/joint_states /joint_states" >
  </node>    
   
  <!-- publish both arm+hand tf -->
  <node pkg="robot_state_publisher" type="robot_state_publisher"
                            name="robot_state_publisher_bimanual">
      <param name="publish_frequency" type="double" value="10.0" />
  </node>
  
  <!-- drivers and/or controllers the arm -->
  <group ns="la">
    <!-- Currently no difference between simulated and real kuka -->
  
    <!-- only load parameters here -->
    <rosparam command="load" file="$(arg agni)/kuka/la_controllers.yaml" />
  </group> 
  <group ns="ra">
    <!-- Currently no difference between simulated and real kuka -->
  
    <!-- only load parameters here -->
    <rosparam command="load" file="$(arg agni)/kuka/ra_controllers.yaml" />
  </group> 
  
  <!-- drivers and/or controllers for the hand -->
  <arg name="controller_type" default="mixed_position_velocity_controller"/>
  <group if="$(arg SIM)"> 
    <group ns="lh">
      <!-- joint_state_publishers controller -->
      <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch"/>
      <!-- motor controllers -->
      
      <rosparam file="$(arg agni)/config/lh_hand_controller_gazebo.yaml" command="load"/>
      <node name="spawn_gazebo_hand_controllers"
          pkg="controller_manager" type="spawner" respawn="false" output="screen"
          args="--shutdown-timeout=1.0 sh_lh_ffj0_$(arg controller_type) sh_lh_ffj3_$(arg controller_type) sh_lh_ffj4_$(arg controller_type) sh_lh_mfj0_$(arg controller_type) sh_lh_mfj3_$(arg controller_type) sh_lh_mfj4_$(arg controller_type) sh_lh_rfj0_$(arg controller_type) sh_lh_rfj3_$(arg controller_type) sh_lh_rfj4_$(arg controller_type) sh_lh_lfj0_$(arg controller_type) sh_lh_lfj3_$(arg controller_type) sh_lh_lfj4_$(arg controller_type) sh_lh_lfj5_$(arg controller_type) sh_lh_thj1_$(arg controller_type) sh_lh_thj2_$(arg controller_type) sh_lh_thj3_$(arg controller_type) sh_lh_thj4_$(arg controller_type) sh_lh_thj5_$(arg controller_type) sh_lh_wrj1_$(arg controller_type) sh_lh_wrj2_$(arg controller_type)" />
    
    </group>  
    <group ns="rh">
      <!-- joint_state_publishers controller -->
      <include file="$(find ros_ethercat_model)/launch/joint_state_publisher.launch"/>
      <!-- motor controllers -->
      <rosparam file="$(arg agni)/config/rh_hand_controller_gazebo.yaml" command="load"/>
      <node name="spawn_gazebo_hand_controllers"
          pkg="controller_manager" type="spawner" respawn="false" output="screen"
          args="--shutdown-timeout=1.0 sh_rh_ffj0_$(arg controller_type) sh_rh_ffj3_$(arg controller_type) sh_rh_ffj4_$(arg controller_type) sh_rh_mfj0_$(arg controller_type) sh_rh_mfj3_$(arg controller_type) sh_rh_mfj4_$(arg controller_type) sh_rh_rfj0_$(arg controller_type) sh_rh_rfj3_$(arg controller_type) sh_rh_rfj4_$(arg controller_type) sh_rh_lfj0_$(arg controller_type) sh_rh_lfj3_$(arg controller_type) sh_rh_lfj4_$(arg controller_type) sh_rh_lfj5_$(arg controller_type) sh_rh_thj1_$(arg controller_type) sh_rh_thj2_$(arg controller_type) sh_rh_thj3_$(arg controller_type) sh_rh_thj4_$(arg controller_type) sh_rh_thj5_$(arg controller_type) sh_rh_wrj1_$(arg controller_type) sh_rh_wrj2_$(arg controller_type)" />
   
    </group>  
  </group>  
  
  <group unless="$(arg SIM)"> 
    <!-- ns is already contained in sr_rh|lhand.launch -->
    <include file="$(find sr_ethercat_hand_config)/launch/sr_lhand.launch" >
        <!-- cheating with strangely placed quotes because the xacro execution in sr_edc.launch 
       puts everything into quotes but substitution args should not be into quotes
       and also cannot be replaced by a textfile load as xacro is executed within sr_edc.launch -->
      <arg name="robot_description" value="$(arg agni)/robots/shadow_hands.urdf.xacro'  MODEL:=motor SIDE:=left TACTILE:=ubi PREFIX:=lh ' " />
    </include>
    <include file="$(find sr_ethercat_hand_config)/launch/sr_rhand.launch" >
       <!-- cheating with strangely placed quotes because the xacro execution in sr_edc.launch 
       puts everything into quotes but substitution args should not be into quotes -->
      <arg name="robot_description" value="$(arg agni)/robots/shadow_hands.urdf.xacro'  MODEL:=motor SIDE:=right TACTILE:=ubi PREFIX:=rh ' " />
    </include>
 
    <!-- ns is already contained in the controller.launch -->
    <include file="$(find sr_ethercat_hand_config)/launch/controllers/sr_edc_mixed_position_velocity_controllers.launch" >
			<arg name="set_namespace" value="1"/>
			<arg name="config_dir" value="lh/" />
			<arg name="namespace" value="lh" />
		</include>
    <include file="$(find sr_ethercat_hand_config)/launch/controllers/sr_edc_mixed_position_velocity_controllers.launch" >
			<arg name="set_namespace" value="1"/>
			<arg name="config_dir" value="rh/" />
			<arg name="namespace" value="rh" />
		</include>
  </group>
   
</launch>
