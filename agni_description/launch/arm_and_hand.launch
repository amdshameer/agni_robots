<launch>
  <arg name="SIM" default="true"/>
  <arg name="ARM" default="kuka"/>
  <arg name="FLOBI" default="false"/>
  <arg name="R" default="1"/>
  <arg name="L" default="0"/>
  <!-- arguments R and L to select left or right or both arm and hand -->
  <!-- USE_PREFIX [true|false] to tell to use prefix for the end-effector or not.
       Is mandatory if using two hands -->
  <!-- ARM [kuka|pa10]-->
  <!-- FLOBI to select if flobi should be added to the setup -->
  
  <group if="$(arg SIM)">
    <!-- start gazebo with an empty plane -->
    <!-- Gazebo world file to load. -->
    <arg name="world_name" default="$(find agni_description)/models/agni.world" />
    <arg name="gui" default="true"/>
  
    <!-- We want gazebo to stay in the root namespace but the nodes below to be
    relative. Can then launch this inside a namespace to namespace the hand. -->
    <group ns="/">
        <!-- We reuse the logic in empty_world.launch, changing only the name of the world to be launched -->
      <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="gui" value="$(arg gui)"/>
      </include>      
    </group>
  </group>
  
  <!-- rtt deployement environment -->
  <node name="rtt_environment" pkg="rtt_ros" type="rttlua" launch-prefix="xterm -hold -T rtt_environment -e " args=" -i $(find agni_description)/scripts/deploy.lua">
  </node> 
  
  <!-- load frame description  -->
  <param name="platform_description" command="$(find xacro)/xacro.py '$(find agni_description)/robots/frame.urdf.xacro' FRAME:=$(arg ARM)" />
  <!-- load camera description -->
  <param name="camera_description" command="$(find icl_config_parser_py)/icl_conf_parser.py '$(find agni_description)/calibration/depth-qvga.xml'"/>
  
  <!-- set robot description for combined table + robot arm and end-effector  -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find agni_description)/robots/platforms.urdf.xacro' ARM:=$(arg ARM) 
              FLOBI:=$(arg FLOBI) R:=$(arg R) L:=$(arg L) R_EE_TYPE:=shadow_hand R_EE_MODEL:=motor R_EE_SIDE:=right R_EE_TACTILE:=ubi 
              L_EE_TYPE:=shadow_hand L_EE_MODEL:=motor L_EE_SIDE:=left L_EE_TACTILE:=ubi SIM:=$(arg SIM) " />
 
  <group if="$(arg SIM)">
    <!-- spawn the support model -->
    <node name="spawn_support" pkg="gazebo_ros" type="spawn_model" args="-urdf -param platform_description -model platform -z 0" respawn="false" output="screen" /> 
    <!-- spawn the camera model -->
    <node name="spawn_camera" pkg="gazebo_ros" type="spawn_model" args="-urdf -param camera_description -model icl_camera" respawn="false" output="screen" />
  </group>
   
  <!-- robots -->
  <group if="$(arg R)">
    <!-- RIGHT arm & hand only -->
    <include file="$(find agni_description)/launch/right_arm_and_hand.launch">
      <arg name="arm_type" value="$(arg ARM)"/>
      <arg name="sim" value="$(arg SIM)"/>
      <arg name="hand_model" value="motor"/>
      <arg name="tactile" value="ubi"/>
    </include>
    <!-- attach RIGHT arm+hand to namespaced-world -->
    <node name="right_arm_static" pkg="tf" type="static_transform_publisher"   args="0 0 0 0 0 0 /$(arg ARM)_frame /right/world  100"/>
    <!-- relay RIGHT arm+hand joint_states to the main one-->
    <node pkg="topic_tools" type="relay"
      name="right_joint_state_merger"
      args="/right/joint_states /joint_states" >
    </node>
  </group>  
  <group if="$(arg L)">
    <!-- LEFT arm & hand only -->
    <include file="$(find agni_description)/launch/left_arm_and_hand.launch">
      <arg name="arm_type" value="$(arg ARM)"/>
      <arg name="sim" value="$(arg SIM)"/>
      <arg name="hand_model" value="motor"/>
      <arg name="tactile" value="ubi"/>
    </include>
    <!-- attach LEFT arm+hand to namespaced-world -->
    <node name="left_arm_static" pkg="tf" type="static_transform_publisher"   args="0 0 0 0 0 0 /$(arg ARM)_frame /left/world 100"/>
    <!-- relay LEFT arm+hand joint_states to the main one-->
    <node pkg="topic_tools" type="relay"
        name="left_joint_state_merger"
        args="/left/joint_states /joint_states" >
    </node>
  </group>  
   
   <!-- publish both arm+hand tf -->
  <node pkg="robot_state_publisher" type="robot_state_publisher"
                            name="robot_state_publisher_bimanual">
      <param name="publish_frequency" type="double" value="10.0" />
  </node>
 
</launch>
