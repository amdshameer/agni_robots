<launch>
  <arg name="SIM" default="true"/>
  <arg name="FRAME" default="famula"/>
  <arg name="ARM_L" default="kukaL"/>
  <arg name="ARM_R" default="kukaR"/>
  <arg name="TOOL_L" default="shadow_motor_left"/>
  <arg name="TOOL_R" default="shadow_motor_right"/>
  <arg name="FLOBI" default="false"/>
  <arg name="R" default="1"/>
  <arg name="L" default="0"/>
  <arg name="RTT" default="1"/>

  <!-- arguments R and L to select left or right or both arm and hand -->
  <!-- ARM_L|ARM_R [kukaL|kukaR|pa10a|pa10c|...]-->
  <!-- TOOL_L|TOOL_R [shadow_motor_left|shadow_motor_right|...]-->
  <!-- FLOBI to select if flobi should be added to the setup -->
  <!-- RTT to select if an RTT enviromnemt + deployer + services should be started -->
  
  <group if="$(arg SIM)">
    <!-- start gazebo with an empty plane -->
    <!-- Gazebo world file to load. -->
    <arg name="world_name" default="$(find agni_description)/models/agni.world" />
    <arg name="gui" default="true"/>
  
    <!-- We want gazebo to stay in the root namespace but the nodes below to be
    relative. Can then launch this inside a namespace to namespace the hand. -->
    <group ns="/">
        <!-- We reuse the logic in empty_world.launch, changing only the name of the world to be launched -->
      <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="gui" value="$(arg gui)"/>
      </include>      
    </group>
  </group>
  
  <!-- rtt deployement environment -->
  <group if="$(arg RTT)">
    <include file="$(find agni_description)/launch/rtt_bringup.launch"/>
  </group>
  
  <!-- load frame description  -->
  <param name="platform_description" command="$(find xacro)/xacro --inorder '$(find agni_description)/robots/single.urdf.xacro' FRAME:=$(arg FRAME)" />
  <!-- load camera description -->
  <param name="camera_description" command="$(find icl_config_parser_py)/icl_conf_parser.py '$(find agni_description)/calibration/depth-qvga.xml'"/>
  
  <!-- set robot description for combined table + robot arm and end-effector  -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find agni_description)/robots/bimanual.urdf.xacro' 
              CALIB:=$(arg FRAME) FRAME:=$(arg FRAME) ARM_R:=$(arg ARM_R) ARM_L:=$(arg ARM_L) 
              FLOBI:=$(arg FLOBI) TOOL_R:=$(arg TOOL_R) TOOL_L:=$(arg TOOL_L) SIM:=$(arg SIM) " />
 
  <group if="$(arg SIM)">
    <!-- spawn the support model -->
    <node name="spawn_support" pkg="gazebo_ros" type="spawn_model" args="-urdf -param platform_description -model platform -z 0" respawn="false" output="screen" /> 
    <!-- spawn the camera model -->
    <node name="spawn_camera" pkg="gazebo_ros" type="spawn_model" args="-urdf -param camera_description -model icl_camera" respawn="false" output="screen" />
  </group>
   
  <!-- attach the frame to the world 
  <node name="frame_static" pkg="tf" type="static_transform_publisher"   args="0 0 0 0 0 0 /frame /world 100"/>-->
      
  <!-- robots -->
  <group if="$(arg R)">
    <!-- RIGHT arm & hand only -->
    <include file="$(find agni_description)/launch/right_arm_and_hand.launch">
      <arg name="arm_type" value="$(arg ARM_R)"/>
      <arg name="sim" value="$(arg SIM)"/>
      <arg name="hand_type" value="$(arg TOOL_R)"/>
      <arg name="calib" value="$(arg FRAME)"/>
    </include>

    <!-- relay RIGHT arm+hand joint_states to the main one-->
    <node pkg="topic_tools" type="relay"
      name="right_joint_state_merger"
      args="/right/joint_states /joint_states" >
    </node>
  </group>  
  <group if="$(arg L)">
    <!-- LEFT arm & hand only -->
    <include file="$(find agni_description)/launch/left_arm_and_hand.launch">
      <arg name="arm_type" value="$(arg ARM_L)"/>
      <arg name="sim" value="$(arg SIM)"/>
      <arg name="hand_type" value="$(arg TOOL_L)"/>
      <arg name="calib" value="$(arg FRAME)"/>
    </include>


    <!-- relay LEFT arm+hand joint_states to the main one-->
    <node pkg="topic_tools" type="relay"
        name="left_joint_state_merger"
        args="/left/joint_states /joint_states" >
    </node>
  </group>  
   
   <!-- publish both arm+hand tf -->
  <node pkg="robot_state_publisher" type="robot_state_publisher"
                            name="robot_state_publisher_bimanual">
      <param name="publish_frequency" type="double" value="10.0" />
  </node>
 
</launch>
