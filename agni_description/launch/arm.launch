<launch>
  <arg name="SIM" default="true"/>
  <arg name="FRAME" default="famula"/>
  <arg name="FLOBI" default="false"/>
  <arg name="RA" default="1"/>
  <arg name="LA" default="0"/>
  <arg name="ARM_L" default="kukaL" if="$(arg LA)"/>
  <arg name="ARM_R" default="kukaR" if="$(arg RA)"/>
  <arg name="ARM_L" value="-" unless="$(arg LA)"/>
  <arg name="ARM_R" value="-" unless="$(arg RA)"/>
  <arg name="RTT" default="1"/>
  <!-- RA and LA to select left or right or both arm -->
  <!-- ARM [kuka|pa10]-->
  <!-- RTT to select if an RTT enviromnemt + deployer + services should be started -->
  
  <group if="$(arg SIM)">
    <!-- start gazebo with an empty plane -->
    <!-- Gazebo world file to load. -->
    <arg name="world_name" default="$(find agni_description)/models/agni.world" />
    <arg name="gui" default="true"/>

    <!-- We want gazebo to stay in the root namespace but the nodes below to be
    relative. Can then launch this inside a namespace to namespace the hand. -->
    <group ns="/">
        <!-- We reuse the logic in empty_world.launch, changing only the name of the world to be launched -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
          <arg name="world_name" value="$(arg world_name)"/>
          <arg name="gui" value="$(arg gui)"/>
        </include>
    </group>
  </group>
  
  <!-- rtt deployement environment -->
  <group if="$(arg RTT)">
    <include file="$(find agni_description)/launch/rtt_bringup.launch"/>
  </group>
  
  <!-- load frame description -->
  <param name="platform_description" command="$(find xacro)/xacro --inorder '$(find agni_description)/robots/single.urdf.xacro' FRAME:=$(arg FRAME)" />

  <!-- set robot description for combined table + robot arm NO end-effector  -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find agni_description)/robots/bimanual.urdf.xacro' 
              CALIB:=$(arg FRAME) FRAME:=$(arg FRAME) ARM_R:=$(arg ARM_R) ARM_L:=$(arg ARM_L) 
              FLOBI:=$(arg FLOBI) TOOL_R:='-' TOOL_L:='-' SIM:=$(arg SIM) " />
  <group if="$(arg SIM)">
   <!-- spawn the support model -->
   <node name="spawn_support" pkg="gazebo_ros" type="spawn_model" args="-urdf -param platform_description -model platform -z 0" respawn="false" output="screen" /> 
  </group>
    
  <!-- robots needs to be spawned separately due to plugin in ns --> 
  <group if="$(arg RA)">
    <group ns="ra">
      <!-- start the arm -->
      <include file="$(find agni_description)/launch/single_arm_no_controllers.launch" >
        <arg name="init_args" value="" />
        <arg name="prefix" value="r"/>
        <arg name="arm_type" value="$(arg ARM_R)"/>
        <arg name="calib" value="$(arg FRAME)"/>
        <arg name="sim" value="$(arg SIM)"/>
      </include> 
      <!-- Controllers for the arm -->
      <include file="$(find agni_description)/launch/$(arg ARM_R)_bringup.launch" >
        <arg name="namespace" value="ra" />
        <arg name="sim" value="$(arg SIM)"/>
      </include>
    </group>
    <!-- relay RIGHT arm joint_states to the main one-->
    <node pkg="topic_tools" type="relay"
      name="ra_joint_state_merger"
      args="/ra/joint_states /joint_states" >
    </node>
  </group>
  <group if="$(arg LA)">
    <group ns="la">
      <!-- start the arm -->
      <include file="$(find agni_description)/launch/single_arm_no_controllers.launch" >
        <arg name="init_args" value="" />
        <arg name="prefix" value="l"/>
        <arg name="arm_type" value="$(arg ARM_L)"/>
        <arg name="calib" value="$(arg FRAME)"/>
        <arg name="sim" value="$(arg SIM)"/>
      </include>
      <!-- Controllers for the arm -->
      <include file="$(find agni_description)/launch/$(arg ARM_L)_bringup.launch" >
        <arg name="namespace" value="la" />
        <arg name="sim" value="$(arg SIM)"/>
      </include>
    </group>
    <!-- relay LEFT arm joint_states to the main one-->
    <node pkg="topic_tools" type="relay"
      name="la_joint_state_merger"
      args="/la/joint_states /joint_states" >
    </node>
  </group>
  
  <node pkg="robot_state_publisher" type="robot_state_publisher"
        name="robot_state_publisher_arms">
    <param name="publish_frequency" type="double" value="20.0" />
  </node>
  
</launch>
