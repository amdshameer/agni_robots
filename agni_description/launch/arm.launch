<launch>
  <arg name="SIM" default="true"/>
  <arg name="ARM" default="kuka"/>
  <arg name="FLOBI" default="false"/>
  <arg name="RA" default="1"/>
  <arg name="LA" default="0"/>
  <!-- RA and LA to select left or right or both arm -->
  <!-- ARM [kuka|pa10]-->

  <group if="$(arg SIM)">
    <!-- start gazebo with an empty plane -->
    <!-- Gazebo world file to load. -->
    <arg name="world_name" default="$(find agni_description)/models/agni.world" />
    <arg name="gui" default="true"/>

    <!-- We want gazebo to stay in the root namespace but the nodes below to be
    relative. Can then launch this inside a namespace to namespace the hand. -->
    <group ns="/">
        <!-- We reuse the logic in empty_world.launch, changing only the name of the world to be launched -->
        <include file="$(find gazebo_ros)/launch/empty_world.launch">
          <arg name="world_name" value="$(arg world_name)"/>
          <arg name="gui" value="$(arg gui)"/>
        </include>
    </group>
  </group>
  
  <!-- rtt deployement environment -->
  <node name="rtt_environment" pkg="rtt_ros" type="rttlua" launch-prefix="xterm -hold -T rtt_environment -e " args=" -i $(find agni_description)/scripts/deploy.lua">
  </node> 
  
  <!-- load frame description -->
  <param name="platform_description" command="$(find xacro)/xacro.py '$(find agni_description)/robots/frame.urdf.xacro' FRAME:=$(arg ARM)" />

  <!-- set robot description for combined table + robot arm NO end-effector  -->
  <param name="robot_description" command="$(find xacro)/xacro --inorder '$(find agni_description)/robots/platforms.urdf.xacro' ARM:=$(arg ARM) 
              FLOBI:=$(arg FLOBI) R:=$(arg RA) L:=$(arg LA) R_EE_TYPE:='-' L_EE_TYPE:='-' SIM:=$(arg SIM) " />
 
  <group if="$(arg SIM)">
   <!-- spawn the support model -->
   <node name="spawn_support" pkg="gazebo_ros" type="spawn_model" args="-urdf -param platform_description -model platform -z 0" respawn="false" output="screen" /> 
  </group>
  
  <!-- robots --> 
  <group if="$(arg RA)">
    <group ns="ra">
      <!-- start the arm -->
      <include file="$(find agni_description)/launch/single_arm_no_controllers.launch" >
        <arg name="init_args" value="" />
        <arg name="namespace" value="r"/>
        <arg name="arm_type" value="$(arg ARM)"/>
        <arg name="side" value="right"/>
        <arg name="sim" value="$(arg SIM)"/>
      </include>
      <!-- Controllers for the arm -->
      <include file="$(find agni_description)/launch/$(arg ARM)_bringup.launch" >
        <arg name="namespace" value="ra" />
        <arg name="sim" value="$(arg SIM)"/>
      </include>	
    </group>
    <!-- attach arm to namespaced-world -->
    <node name="right_arm_static" pkg="tf" type="static_transform_publisher"  args="0 0 0 0 0 0 /$(arg ARM)_frame /right/world  100"/>
  </group>
  <group if="$(arg LA)">
    <group ns="la">
      <!-- start the arm -->
      <include file="$(find agni_description)/launch/single_arm_no_controllers.launch" >
        <arg name="init_args" value="" />
        <arg name="namespace" value="l"/>
        <arg name="arm_type" value="$(arg ARM)"/>
        <arg name="side" value="left"/>
        <arg name="sim" value="$(arg SIM)"/>
      </include>
      <!-- Controllers for the arm -->
      <include file="$(find agni_description)/launch/$(arg ARM)_bringup.launch" >
        <arg name="namespace" value="la" />
        <arg name="sim" value="$(arg SIM)"/>
      </include>	
    </group>		
    <!-- attach arm to namespaced-world -->
    <node name="left_arm_static" pkg="tf" type="static_transform_publisher"   args="0 0 0 0 0 0  /$(arg ARM)_frame /left/world 100"/>
	</group>		
</launch>
